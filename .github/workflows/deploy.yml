name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: create OpenWeather config.yml
        env:
          CONFIG_TEXT: ${{ secrets.OPEN_WEATHER_CONFIG }}
          DIR: src/main/resources
          FILE_NAME: application-weather.yml
        run: echo $CONFIG_TEXT | base64 -d > $DIR/$FILE_NAME

      - name: create product config.yml
        env:
          CONFIG_TEXT: ${{ secrets.PRODUCT_CONFIG }}
          DIR: src/main/resources
          FILE_NAME: application-product.yml
        run: echo $CONFIG_TEXT | base64 -d > $DIR/$FILE_NAME

      - name: create actuator config.yml
        env:
          CONFIG_TEXT: ${{ secrets.ACTUATOR_CONFIG }}
          DIR: src/main/resources
          FILE_NAME: application-actuator.yml
        run: echo $CONFIG_TEXT | base64 -d > $DIR/$FILE_NAME

      - name: create email config.yml
        env:
          CONFIG_TEXT: ${{ secrets.EMAIL_CONFIG }}
          DIR: src/main/resources
          FILE_NAME: application-email.yml
        run: echo $CONFIG_TEXT | base64 -d > $DIR/$FILE_NAME

      - name: create oauth config.yml
        env:
          CONFIG_TEXT: ${{ secrets.OAUTH_CONFIG }}
          DIR: src/main/resources
          FILE_NAME: application-oauth.yml
        run: echo $CONFIG_TEXT | base64 -d > $DIR/$FILE_NAME

      - name: create coordinate config.yml
        env:
          CONFIG_TEXT: ${{ secrets.COORDINATE_CONFIG }}
          DIR: src/main/resources/data
          FILE_NAME: application-coordinate.yml
        run: |
          mkdir -p $DIR
          echo $CONFIG_TEXT | base64 -d > $DIR/$FILE_NAME

      - name: Create docker_app_env file
        run: echo "${{ secrets.DOCKER_APP_ENV }}" | base64 -d > ./docker_app_env

      - name: Build with Gradlew
        run: |
          ./gradlew clean build -Pspring.profiles.active=product

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: |
            ./docker_app_env
            ./docker-compose.yml
            ./Dockerfile
            build/libs/*.jar

  deploy:
    name: Deploy with SCP and Docker
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts

      - name: SCP JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "build/libs/*-server-0.0.1-SNAPSHOT.jar,
            ./docker_app_env,
            ./Dockerfile,
            ./docker-compose.yml"
          target: ${{ secrets.PROJECT02_ROOT_DIRECTORY }}

      - name: SSH Execute command on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ${{ secrets.PROJECT02_ROOT_DIRECTORY }}
            ./scripts/server-start.sh